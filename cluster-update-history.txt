 1133  kubectl -n fakeapp create -f  kv-secret.yaml
 1134  kubectl -n fakeapp get vaultstaticsecrets.secrets.hashicorp.com 
 1135  vi kv-secret.yaml
 1136  kubectl -n fakeapp get secret
 1137  kubectl -n vault get secret
 1138  kubectl -n fakeapp get secret
 1139  vi deployment.yaml
 1140  kubectl -n fakeapp create -f  deployment.yaml
 1141  kubectl -n fakeapp get pods
 1142  kubectl -n fakeapp describe pods fakeapp-6d9c85c4d8-j6hkw 
 1143  kubectl -n vault-secrets-operator-system get pod
 1144  kubectl -n vault-secrets-operator-system describe pod vault-secrets-operator-controller-manager-5fd78476f-f5cwm 
 1145  kubectl -n vault-secrets-operator-system logs vault-secrets-operator-controller-manager-5fd78476f-f5cwm 
 1146  vi kv-secret.yaml
 1147  k -n vault get VaultConnection
 1148  k -n vault-secrets-operator-system get VaultConnection
 1149  k -n fakeapp get VaultConnection
 1150  k -n fakeapp get VaultStaticSecret
 1151  k -n fakeapp describe VaultStaticSecret vault-static-secret-mysecret 
 1152  vi kv-secret.yaml
 1153  kubectl -n vault exec -it vault-0 -- sh
 1154  k -n fakeapp describe VaultStaticSecret vault-static-secret-mysecret 
 1155  kubectl -n vault exec -it vault-0 -- sh
 1156  kubectl get svc
 1157  kubectl -n vault exec -it vault-0 -- sh
 1158  k -n fakeapp get VaultStaticSecret vault-static-secret-mysecret -o yaml
 1159  vi kv-secret.yaml 
 1160  kubectl -n vault delete -f kv-secret.yaml 
 1161  kubectl -n fakeapp delete -f kv-secret.yaml 
 1162  kubectl -n fakeapp create -f kv-secret.yaml 
 1163  kubectl -n fakeapp get pods
 1164  k -n fakeapp describe VaultStaticSecret vault-static-secret-mysecret 
 1165  vi vault-auth.yaml
 1166  vi kv-secret.yaml 
 1167  kubectl -n vault exec -it vault-0 -- sh
 1168  cd ..
 1169  vi vso-values.yaml 
 1170  k get svc -n vault-secrets-operator-system 
 1171  k get svc -n vault
 1172  vi vso-values.yaml 
 1173  k -n fakeapp describe VaultStaticSecret vault-static-secret-mysecret 
 1174  git clone https://github.com/hashicorp-education/learn-vault-secrets-operator.git
 1175  cd learn-vault-secrets-operator/
 1176  ls
 1177  kubectl -n vault exec -it vault-0 -- sh
 1178  kubectl create ns app
 1179  cd vault/
 1180  ls
 1181  vi vault-auth-static.yaml 
 1182  k create -f vault-auth-static.yaml 
 1183  vi static-secret.yaml 
 1184  vi vault-auth-static.yaml 
 1185  kubectl create -f vault-auth-static.yaml 
 1186  kubectl create -f static-secret.yaml 
 1187  kubectl -n app get secret
 1188  kubectl -n app get vaultstaticsecret.secrets.hashicorp.com/vault-kv-app
 1189  kubectl -n app get vaultstaticsecret
 1190  kubectl -n app describe  vaultstaticsecret  vault-kv-app 
 1191  kubectl events 
 1192  kubectl events --help
 1193  kubectl events -A
 1194  kubectl -n app describe  vaultstaticsecret  vault-kv-app 
 1195  kubectl get all -n app
 1196  kubectl -n app describe  vaultstaticsecret  vault-kv-app 
 1197  vi static-secret.yaml 
 1198  vi vault-auth-static.yaml 
 1199  vi vault-operator-values.yaml 
 1200  ls
 1201  vi static-secret.yaml 
 1202  cd
 1203  cd vault/
 1204  ls
 1205  cd vso-demo/
 1206  ls
 1207  vi deployment.yaml 
 1208  k -n fakeapp describe po fakeapp-6d9c85c4d8-j6hkw 
 1209  vi deployment.yaml 
 1210  kubectl delete -f deployment.yaml 
 1211  kubectl delete -f deployment.yaml -n fakeapp 
 1212  vi deployment.yaml 
 1213  kubectl delete -f deployment.yaml -n fakeapp 
 1214  kubectl create -f deployment.yaml -n fakeapp 
 1215  kubectl -n fakeapp get pods
 1216  kubectl -n fakeapp describe pods fakeapp-68dfcd666c-sgrrr 
 1217  k get VaultConnection
 1218  k get vaultconnections.secrets.hashicorp.com 
 1219  k get vaultconnections.secrets.hashicorp.com -n app 
 1220  k get vaultconnections.secrets.hashicorp.com -n fakeapp 
 1221  vi conn.yaml
 1222  k get svc -n vault
 1223  vi vso-values.yaml 
 1224  vi conn.yaml
 1225  k -n fakeapp create -f conn.yaml
 1226  vi conn.yaml
 1227  k -n fakeapp create -f conn.yaml
 1228  k get vaultconnections.secrets.hashicorp.com -n fakeapp 
 1229  kubectl get vaultstaticsecrets.secrets.hashicorp.com 
 1230  kubectl get vaultstaticsecrets.secrets.hashicorp.com -n fakeapp 
 1231  kubectl -n fakeapp describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret-mysecret 
 1232  ls
 1233  vi vault-auth.yaml 
 1234  vi kv-secret.yaml 
 1235  kubectl delete -f kv-secret.yaml 
 1236  kubectl create -f kv-secret.yaml 
 1237  kubectl -n fakeapp describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret-mysecret 
 1238  kubectl -n fakeapp get vaultstaticsecrets.secrets.hashicorp.com 
 1239  kubectl -n fakeapp describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret-mysecret 
 1240  vi kv-secret.yaml 
 1241  vi vo
 1242  vi conn.yaml 
 1243  kubectl create -f conn.yaml -n default 
 1244  kubectl delete -f kv-secret.yaml 
 1245  kubectl create -f kv-secret.yaml 
 1246  kubectl -n fakeapp describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret-mysecret 
 1247  k get clusterrole
 1248  k -n vault exec -it vault-0 -- bash
 1249  k -n vault exec -it vault-0 -- sh
 1250  vi k8s-sa.yaml
 1251  k create ns devops
 1252  k -n devops create -f conn.yaml 
 1253  k -n devops create -f k8s-sa.yaml 
 1254  TOKEN_REVIEW_JWT=$(kubectl get secret vault-auth --output='go-template={{ .data.token }}' | base64 --decode) 
 1255  TOKEN_REVIEW_JWT=$(kubectl -n devops get secret vault-auth --output='go-template={{ .data.token }}' | base64 --decode) 
 1256  echo $TOKEN_REVIEW_JWT
 1257  KUBE_CA_CERT=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode) 
 1258  KUBE_HOST=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.server}')
 1259  echo $KUBE_CA_CERT
 1260  echo $KUBE_HOST
 1261  k -n vault exec -it vault-0 -- sh
 1262  kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode
 1263  k -n vault exec -it vault-0 -- sh
 1264  vi k8s-sa.yaml 
 1265  vi crole.yaml
 1266  k -n vault get svc
 1267  vi conn.yaml 
 1268  vi crole.yaml
 1269  kubectl create -f  crole.yaml -n devops 
 1270  vi crole.yaml
 1271  kubectl create -f  crole.yaml -n devops 
 1272  kubectl apply -f  crole.yaml -n devops 
 1273  k -n devops get secret
 1274  vi crole.yaml
 1275  k -n devops get vaultstaticsecrets.secrets.hashicorp.com 
 1276  k -n devops describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret 
 1277  k -n vault exec -it vault-0 -- sh
 1278  ls
 1279  vi k8s-sa.yaml 
 1280  vi crole.yaml 
 1281  k -n devops delete -f crole.yaml 
 1282  k -n devops create -f crole.yaml 
 1283  vi crole.yaml 
 1284  kubectl -n devops get vaultstaticsecrets.secrets.hashicorp.com 
 1285  kubectl -n devops get vaultstaticsecrets.secrets.hashicorp.com vault-static-secret -o yaml
 1286  kubectl -n devops get secret
 1287  kubectl -n devops describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret 
 1288  vi k8s-sa.yaml 
 1289  kubectl -n devops get vaultconnections.secrets.hashicorp.com 
 1290  kubectl -n devops edit vaultconnections.secrets.hashicorp.com vault-connection 
 1291  kubectl -n devops describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret 
 1292  kubectl -n devops delete -f crole.yaml 
 1293  kubectl -n devops create -f crole.yaml 
 1294  kubectl -n devops describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret 
 1295  kubectl get vaultconnections.secrets.hashicorp.com 
 1296  kubectl edit vaultconnections.secrets.hashicorp.com vault-connection 
 1297  kubectl -n devops describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret 
 1298  kubectl -n devops delete -f crole.yaml 
 1299  kubectl -n devops create -f crole.yaml 
 1300  kubectl -n devops describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret 
 1301  kubectl -n devops get vaultconnections.secrets.hashicorp.com 
 1302  kubectl -n devops get vaultconnections.secrets.hashicorp.com -o yaml
 1303  kubectl -n devops delete -f crole.yaml 
 1304  kubectl get svc -n vault
 1305  kubectl edit svc vault -n vault
 1306  kubectl get svc -n vault
 1307  vi crole.yaml 
 1308  kubectl -n devops create -f crole.yaml 
 1309  k -n devops get vaultstaticsecrets.secrets.hashicorp.com 
 1310  k -n devops describe vaultstaticsecrets.secrets.hashicorp.com vault-static-secret 
 1311  vi crole.yaml 
 1312  vi k8s-sa.yaml 
 1313  k describe clusterrole system:auth-delegator 
 1314  k get  clusterrole system:auth-delegator  -o yaml 
 1315  kubectl get secret -n devops 
 1316  kubectl get secret vault-auth  -n devops -o yaml
 1317  echo "ZGV2b3Bz" | base64 -d
 1318  kubectl delete -f .
 1319  k get ns
 1320  k delete ns app devops fakeapp 
 1321  k get pod -n vault
 1322  k delete  ns vault
 1323  k delete  ns vault-secrets-operator-system 
 1324  k get pods
 1325  cd
 1326  cd -
 1327  vi vso-values.yaml 
 1328  kubectl create deployment test --image ngix --port 80
 1329  cd /tmp/
 1330  vi m=hpa.yaml
 1331  vi m-hpa.yaml
 1332  kubectl create -f m-hpa.yaml
 1333  kubectl get hpa
 1334  kubectl describe hpa example-hpa 
 1335  kubectl autoscale deployment test --min 1 --max 5 --cpu-percent 70
 1336  kubectl get hpa
 1337  kubectl delete hpa example-hpa test
 1338  k delete deployments.apps  test 
 1339  init 0
 1340  helm uninstall vault -n vault 
 1341  helm ls -n vault
 1342  helm ls -n vault-secrets-operator-system
 1343  helm uninstall vault-secrets-operator -n vault-secrets-operator-system
 1344  helm ls -n vault-secrets-operator-system
 1345  kubectl create deployment test --image nginx --replicas 3
 1346  kubectl get pods
 1347  kubectl delete po test-7955cf7657-b4cnj
 1348  kubectl get pods
 1349  kubectl expose deployment test 
 1350  kubectl expose deployment test --port 80
 1351  kubectl get svc
 1352  kubectl delete svc test mydep-svc 
 1353  kubectl expose deployment test --port 80
 1354  kubectl get svc
 1355  cd myapp/
 1356  vi sts.yaml
 1357  kubectl create -f sts.yaml 
 1358  kubectl get sts
 1359  kubectl get pod
 1360  kubectl delete pod web-1
 1361  kubectl get pod
 1362  kubectl delete -f sts.yaml 
 1363  kubectl get pod
 1364  kubectl delete deployments.apps test 
 1365  vi sts.yaml
 1366  kubectl create -f sts.yaml
 1367  kubectl get sts
 1368  kubectl get pods
 1369  kubectl get svc
 1370  kubectl run test --image nginx 
 1371  kubectl exec -it test -- bash
 1372  kubectl get pods -o wide
 1373  kubectl exec -it test -- bash
 1374  nslookup web-0.nginx.default.svc.cluster.local
 1375  kubectl get pods
 1376  kubectl delete -f sts.yaml 
 1377  vi sts.yaml 
 1378  kubectl create -f sts.yaml 
 1379  kubectl get pods
 1380  kubectl get pvc
 1381  kubectl describe pvc www-web-0 
 1382  kubectl get pvc
 1383  kubectl delete -f sts.yaml 
 1384  kubectl get pvc
 1385  kubectl delete pvc www-web-0 
 1386  vi sts.yaml 
 1387  kubectl get sc
 1388  vi sts.yaml 
 1389  kubectl create -f sts.yaml 
 1390  vi sts.yaml 
 1391  kubectl create -f sts.yaml 
 1392  vi sts.yaml 
 1393  kubectl create -f sts.yaml 
 1394  kubectl delete -f sts.yaml 
 1395  vi sts.yaml 
 1396  kubectl create -f sts.yaml 
 1397  kubectl get pods
 1398  kubectl get pvc
 1399  kubectl get pods
 1400  kubectl scale sts web --replicas 5
 1401  kubectl get pods
 1402  kubectl get pvc
 1403  kubectl scale sts web --replicas 3
 1404  kubectl get pvc
 1405  kubectl get pods
 1406  cp deployment.yaml init-con.yaml
 1407  vi init-con.yaml 
 1408  kubectl create -f init-con.yaml 
 1409  vi init-con.yaml 
 1410  kubectl create -f init-con.yaml 
 1411  kubectl get pods
 1412  kubectl delete -f init-con.yaml 
 1413  kubectl create -f init-con.yaml 
 1414  kubectl get pods
 1415  kubectl get svc
 1416  kubectl get pod
 1417  kubectl describe po mydep-57bfd5676c-9xqsc
 1418  kubectl get pods 
 1419  kubectl delete deployments.apps mydep 
 1420  kubectl delete -f sts.yaml 
 1421  kubectl delete pod test 
 1422  kubectl get pods 
 1423  kubectl get svc
 1424  kubectl delete svc test mydep-svc 
 1425  kubectl get svc
 1426  kubectl run test --image nginx 
 1427  kubectl describe po test 
 1428  kubectl get pod -n kube-system 
 1429  hostname
 1430  cd /etc/kubernetes/manifests/
 1431  ls
 1432  vi etcd.yaml 
 1433  cd -
 1434  vi pod.yaml 
 1435  cp pod.yaml /etc/kubernetes/manifests/
 1436  kubectl get pods
 1437  kubectl delete pod mypod-server 
 1438  kubectl get pods
 1439  cd /etc/kubernetes/manifests/
 1440  ls
 1441  rm pod.yaml 
 1442  kubectl get pods
 1443  cd
 1444  history > CMD-13-oct.txt
 1445  git add .
 1446  mv CMD-13-oct.txt myapp/
 1447  cd myapp/
 1448  git add .
 1449  git commit -m "statefulset"
 1450  git push origin main 
 1451  vi CMD-13-oct.txt 
 1452  git add .
 1453  git commit -m "statefulset"
 1454  git push origin main 
 1455  rm CMD-13-oct.txt 
 1456  history 
 1457  vi CMD-13-oct.txt
 1458  git add .
 1459  git commit -m "statefulset"
 1460  git push origin main 
 1461  rm CMD-13-oct.txt 
 1462  git add .
 1463  git commit -m "statefulset"
 1464  git push origin main 
 1465  git commit --amend --all
 1466  git push origin main 
 1467  git add .
 1468  git commit -m "sts"
 1469  git push origin main 
 1470  init 0
 1471  kubectl get nodes
 1472  cd myapp/
 1473  ls
 1474  mkdir configmap
 1475  vi wordpress.yaml 
 1476  vi wp-app.yaml 
 1477  cp wp-app.yaml configmap/
 1478  cd configmap/
 1479  mv wp-app.yaml wp-configmap.yaml 
 1480  vi wp-configmap.yaml 
 1481  code wp-configmap.yaml 
 1482  cd
 1483  vi .bashrc 
 1484  cd myapp/
 1485  kubectl create configmap wpenv --from-literal WORDPRESS_DB_HOST=mysql-svc --from-literal  WORDPRESS_DB_USER=root --from-literal WORDPRESS_DB_PASSWORD=test123 --from-literal WORDPRESS_DB_NAME=wpdb --from-literal WORDPRESS_TABLE_PREFIX=wp_ --dry-run=client -o yaml
 1486  kubectl create configmap wpenv --from-literal WORDPRESS_DB_HOST=mysql-svc --from-literal  WORDPRESS_DB_USER=root --from-literal WORDPRESS_DB_PASSWORD=test123 --from-literal WORDPRESS_DB_NAME=wpdb --from-literal WORDPRESS_TABLE_PREFIX=wp_ --dry-run=client -o yaml > config-env.yaml
 1487  vi config-env.yaml 
 1488  kubectl create configmap wpenv --from-literal WORDPRESS_DB_HOST=mysql-svc --from-literal  WORDPRESS_DB_USER=root --from-literal WORDPRESS_DB_PASSWORD=test123 --from-literal WORDPRESS_DB_NAME=wpdb --from-literal WORDPRESS_TABLE_PREFIX=wp_ 
 1489  kubectl get configmaps 
 1490  kubectl get configmaps
 1491  vi wp-app.yaml 
 1492  kubectl create configmap wpenv --from-literal WORDPRESS_DB_HOST=mysql-svc --from-literal  WORDPRESS_DB_USER=root --from-literal WORDPRESS_DB_PASSWORD=test123 --from-literal WORDPRESS_DB_NAME=wpdb --from-literal WORDPRESS_TABLE_PREFIX=wp_ --dry-run=client -o yaml
 1493  vi wp-app.yaml 
 1494  kubectl edit cm wpenv 
 1495  vi wp-app.yaml 
 1496  kubectl create -f wp-app.yaml 
 1497  kubectl get pods
 1498  kubectl describe pod wordpress 
 1499  kubectl get pods
 1500  kubectl exec -it wordpress -- bash
 1501  vi config-env.yaml 
 1502  ls
 1503  vi wp-app.yaml 
 1504  cd configmap/
 1505  vi wp-configmap.yaml 
 1506  cp wp-configmap.yaml all-env.yaml
 1507  vi all-env.yaml 
 1508  kubectl delete -f all-env.yaml 
 1509  kubectl create -f all-env.yaml 
 1510  kubectl get pods
 1511  kubectl describe pod wordpress 
 1512  kubectl get pods
 1513  kubectl exec -it wordpress -- bash
 1514  cp wp-configmap.yaml cm-file.yaml
 1515  vi cm-file.yaml 
 1516  kubectl get pods
 1517  kubectl edit cm wpenv 
 1518  vi cm-file.yaml 
 1519  kubectl create -f cm-file.yaml 
 1520  kubectl delete -f cm-file.yaml 
 1521  kubectl create -f cm-file.yaml 
 1522  kubectl get pods
 1523  kubectl get svc
 1524  kubectl get pods
 1525  kubectl exec -it appcm -- bash
 1526  ls
 1527  vi index.html
 1528  kubectl create configmap appfile --from-file index.html --dry-run=client -o yaml
 1529  kubectl create configmap appfile --from-file index.html --dry-run=client -o yaml > appconfigmap.yaml
 1530  kubectl create configmap appfile --from-file index.html 
 1531  kubectl get cm
 1532  kubectl get cm appfile -o yaml
 1533  ls
 1534  vi cm-file.yaml 
 1535  kubectl create -f cm-file.yaml 
 1536  kubectl delete -f cm-file.yaml 
 1537  kubectl create -f cm-file.yaml 
 1538  kubectl get pods
 1539  kubectl describe pod appcm
 1540  kubectl get svc
 1541  vi cm-file.yaml 
 1542  ls
 1543  vi wp-configmap.yaml 
 1544  echo "hello" | base64 
 1545  echo "aGVsbG8K" | base64 -d
 1546  cd ..
 1547  mkdir secrets
 1548  cp mysql.yaml secrets/
 1549  cd secrets/
 1550  ls
 1551  vi mysql.yaml 
 1552  kubectl create secret generic dbpass --from-literal pass=test123 --dry-run=client -o yaml
 1553  echo "dGVzdDEyMw==" | base64 -d
 1554  kubectl create secret generic dbpass --from-literal pass=test123 --dry-run=client -o yaml > secret.yaml
 1555  vi secret.yaml 
 1556  kubectl create secret generic dbpass --from-literal pass=test123 
 1557  kubectl get secret
 1558  kubectl get secret dbpass -o yaml
 1559  vi mysql.yaml 
 1560  cd myapp/secrets/
 1561  ls
 1562  vi secret.yaml 
 1563  kubectl get secret
 1564  init 0
 1565  kubectl cre
 1566  cd myapp/
 1567  ls
 1568  cd secrets/
 1569  ls
 1570  vi mysql.yaml 
 1571  rm .mysql.yaml.swp 
 1572  ls
 1573  vi mysql.yaml 
 1574  kubectl get secret
 1575  kubectl get secret dbpass -o yaml
 1576  cd myapp/secrets/
 1577  vi mysql.yaml 
 1578  kubectl create -f mysql.yaml 
 1579  kubectl get pods
 1580  kubectl describe po mysql 
 1581  kubectl get pods
 1582  kubectl exec -it mysql -- bash
 1583  history 
 1584  cat > app.crt
 1585  cat app.crt 
 1586  kubectl create secret generic --from-file app.crt --dry-run=client -o yaml 
 1587  kubectl create secret generic appcrt --from-file app.crt --dry-run=client -o yaml 
 1588  echo "aGVsbG8sIHRoaXMgaXMgY2VydGlmaWNhdGU=" | base64 -d
 1589  kubectl create secret generic appcrt --from-file app.crt --dry-run -o yaml 
 1590  kubectl create secret generic appcrt --from-file app.crt --dry-run=server -o yaml 
 1591  kubectl create secret generic appcrt --from-file app.crt 
 1592  kubectl get secret
 1593  ls
 1594  cp ../pod.yaml .
 1595  ls
 1596  cat app.crt 
 1597  kubectl get secret appcrt -o yaml
 1598  vi pod.yaml 
 1599  kubectl create -f pod.yaml --dry-run=server -o yaml
 1600  kubectl create -f pod.yaml 
 1601  kubectl get pods
 1602  kubectl describe po app
 1603  kubectl get pods
 1604  kubectl exec -it app -- bash
 1605  kubectl delete -f .
 1606  ls
 1607  kubectl get pods
 1608  cd ../configmap/
 1609  kubectl delete -f .
 1610  kubectl get pods
 1611  kubectl delete pod test 
 1612  kubectl get svc
 1613  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/baremetal/deploy.yaml
 1614  kubectl get all -n ingress-nginx 
 1615  kubectl get pods -n ingress-nginx 
 1616  kubectl get svc -n ingress-nginx 
 1617  cd ..
 1618  vi deployment.yaml 
 1619  kubectl create -f deployment.yaml 
 1620  kubectl get pod,svc
 1621  kubectl get pod
 1622  vi ingress.yaml
 1623  kubectl get svc
 1624  vi ingress.yaml
 1625  kubectl create -f ingress.yaml
 1626  kubectl get ing
 1627  kubectl get svc -n ingress-nginx 
 1628  vi ingress.yaml
 1629  kubectl get pod
 1630  kubectl logs mydep-76449b474c-4j2g4
 1631  vi ingress.yaml 
 1632  vi ingress.yaml
 1633  kubectl get svc -n ingress-nginx 
 1634  cd
 1635  vi .kube/config 
 1636  kubectl get ing 
 1637  cd myapp/
 1638  mkdir ing
 1639  cd ing/
 1640  openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
 1641  ls
 1642  kubectl create secret tls aneesh-com --key key.pem --cert cert.pem
 1643  kubectl get secret 
 1644  kubectl get secret aneesh-com -o yaml
 1645  cp ../ingress.yaml .
 1646  vi ingress.yaml 
 1647  kubectl create -f ingress.yaml 
 1648  kubectl delete -f ingress.yaml 
 1649  kubectl create -f ingress.yaml 
 1650  kubectl get ind
 1651  kubectl get ing
 1652  kubectl get svc -n ingress-nginx 
 1653  vi ingress.yaml 
 1654  cd ..
 1655  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
 1656  kubectl get all -n kubernetes-dashboard
 1657  kubectl -n kubernetes-dashboard edit svc kubernetes-dashboard
 1658  kubectl get all -n kubernetes-dashboard
 1659  cd 
 1660  vi .kube/config 
 1661  cd myapp/
 1662  mkdir dash
 1663  cd dash/
 1664  vi sa.yaml
 1665  kubectl create -f sa.yaml
 1666  kubectl -n kubernetes-dashboard create token admin-user
 1667  init 0
 1668  cd myapp/
 1669  ls
 1670  vi /etc/passwd
 1671  adduser user1
 1672  cd 
 1673  vi .kube/config 
 1674  cd /home/user1/
 1675  mkdir .certs
 1676  cd .certs/
 1677  openssl genrsa -out ca.key 2048
 1678  openssl req -x509 -new -nodes -key ca.key -subj "/CN=user1" -days 365 -out ca.crt
 1679  ls
 1680  rm ca.*
 1681  ls
 1682  openssl genrsa -out myuser.key 2048
 1683  rm myuser.key 
 1684  openssl genrsa -out user1.key 2048
 1685  ls
 1686  openssl req -new -key user1.key -out user1.csr -subj "/CN=user1"
 1687  ls
 1688  cd ~/myapp/
 1689  mkdir rbac
 1690  cd rbac/
 1691  vi csr.yaml
 1692  cat /home/user1/.certs/user1.csr 
 1693  vi csr.yaml
 1694  cd -
 1695  cd /home/user1/.certs/
 1696  cat user1.csr | base64 | tr -d "\n"
 1697  vi csr.yaml
 1698  cd -
 1699  vi csr.yaml 
 1700  kubectl create -f csr.yaml 
 1701  kubectl get csr
 1702  kubectl certificate approve user1
 1703  kubectl get csr
 1704  kubectl get csr user1 -o yaml
 1705  cd -
 1706  kubectl get csr myuser -o jsonpath='{.status.certificate}'| base64 -d > user1.crt
 1707  kubectl get csr user1 -o jsonpath='{.status.certificate}'| base64 -d > user1.crt
 1708  ls
 1709  cat user1.crt 
 1710  ls
 1711  cd ..
 1712  ll
 1713  chown -R user1:user1 .certs/
 1714  ll
 1715  cd .certs/
 1716  ll
 1717  cd -
 1718  cd 
 1719  vi .kube/config 
 1720  kubectl create ns devops
 1721  kubectl -n devops create role urole --resource pods,configmap,deployments --verb get,list,create --dry-run=client -o yaml
 1722  kubectl -n devops create role urole --resource pods,configmap,deployments --verb get,list,create --dry-run=client -o yaml > role.yaml
 1723  kubectl -n devops create role urole --resource pods,configmap,deployments --verb get,list,create
 1724  kubectl -n devops create rolebinding uroleb --role urole --user user1 --dry-run=client -o yaml 
 1725  kubectl -n devops create rolebinding uroleb --role urole --user user1 --dry-run=client -o yaml  > rolebinding.yaml
 1726  kubectl -n devops create rolebinding uroleb --role urole --user user1
 1727  kubectl get role -n devops 
 1728  kubectl get rolebindings.rbac.authorization.k8s.io -n devops
 1729  kubectl -n devops edit role urole 
 1730  vi .bashrc 
 1731  source .bashrc 
 1732  kubeadm certs check-expiration
 1733  kubeadm certs renew 
 1734  kubeadm certs renew all
 1735  kubeadm certs check-expiration
 1736  ls
 1737  wget https://get.helm.sh/helm-v3.16.3-linux-amd64.tar.gz
 1738  ls
 1739  tar -xvzf helm-v3.16.3-linux-amd64.tar.gz
 1740  ls
 1741  cd linux-amd64
 1742  ls
 1743  helm 
 1744  helm repo ls
 1745  helm repo rm hashicorp
 1746  helm repo ls
 1747  helm search hub mysql
 1748  helm repo add bitnami https://charts.bitnami.com/bitnami
 1749  helm repo ls
 1750  helm repo update bitnami
 1751  helm search repo bitnami/mysql
 1752  helm search repo bitnami/mysql -l
 1753  helm search repo bitnami/mysql
 1754  helm install mydb bitnami/mysql 
 1755  helm ls
 1756  kubectl get deployments.apps 
 1757  kubectl get sts
 1758  kubectl get pods
 1759  kubectl describe pod mydb-mysql-0
 1760  helm ls
 1761  helm uninstall mydb
 1762  cd 
 1763  cd myapp/
 1764  mkdir helm
 1765  cd helm/
 1766  helm create myapp
 1767  ls
 1768  tree myapp/
 1769  apt  install tree -y
 1770  tree myapp/
 1771  vi myapp/Chart.yaml 
 1772  vi myapp/templates/deployment.yaml 
 1773  vi myapp/values.yaml 
 1774  vi myapp/templates/deployment.yaml 
 1775  vi myapp/values.yaml 
 1776  vi myapp/templates/deployment.yaml 
 1777  tree myapp/
 1778  vi myapp/templates/NOTES.txt 
 1779  cd ..
 1780  git add .
 1781  git commit -m "helm rbac"
 1782  git push origin main 
 1783  init 0
 1784  cd myapp/
 1785  cd va
 1786  cd helm/
 1787  ls
 1788  tree myapp/
 1789  helm install mango myapp/
 1790  helm ls
 1791  kubectl get pods
 1792  kubectl describe pod mango-myapp-58c799fd5c-psblb 
 1793  kubectl get pods
 1794  kubectl describe pod mango-myapp-58c799fd5c-psblb 
 1795  kubectl get pods
 1796  kubectl describe pod mango-myapp-58c799fd5c-psblb 
 1797  kubectl get pods
 1798  helm ls
 1799  ls
 1800  helm uninstall mango
 1801  helm ls
 1802  tree myapp/
 1803  vi myapp/Chart.yaml 
 1804  cd myapp/templates/
 1805  ls
 1806  rm *.yaml
 1807  ls
 1808  rm -rf tests/
 1809  vi _helpers.tpl 
 1810  vi NOTES.txt 
 1811  cd ../..
 1812  tree myapp/
 1813  vi myapp/values.yaml 
 1814  tree myapp/
 1815  vi ../deployment.yaml 
 1816  cp ../deployment.yaml myapp/templates/
 1817  cd -
 1818  ls
 1819  vi deployment.yaml 
 1820  ci service.yaml
 1821  vi service.yaml
 1822  cd -
 1823  tree myapp/
 1824  cd -
 1825  vi deployment.yaml 
 1826  vi service.yaml 
 1827  cd -
 1828  helm install apple myapp/
 1829  helm ls
 1830  cd -
 1831  vi service.yaml 
 1832  vi deployment.yaml 
 1833  cd -
 1834  helm install apple myapp/
 1835  helm ls
 1836  kubectl ge tpods
 1837  kubectl get pods
 1838  kubectl delete deployments.apps mydep 
 1839  kubectl get pods
 1840  helm uninstall apple
 1841  helm ls
 1842  vi myapp/templates/NOTES.txt 
 1843  helm install apple myapp/
 1844  helm uninstall apple
 1845  helm install apple myapp/ --dry-run 
 1846  tree myapp/
 1847  vi myapp/values.yaml 
 1848  vi myapp/templates/deployment.yaml 
 1849  vi myapp/values.yaml 
 1850  vi myapp/templates/deployment.yaml 
 1851  helm install apple myapp/ --dry-run 
 1852  helm install apple myapp/ --dry-run --debug
 1853  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1854  vi myapp/templates/deployment.yaml 
 1855  vi myapp/values.yaml 
 1856  vi myapp/templates/deployment.yaml 
 1857  vi myapp/values.yaml 
 1858  vi myapp/templates/deployment.yaml 
 1859  vi myapp/values.yaml 
 1860  vi myapp/templates/deployment.yaml 
 1861  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1862  helm install apple myapp/ 
 1863  helm ls
 1864  kubectl get deployments.apps 
 1865  kubectl get pods
 1866  helm uninstall apple
 1867  vi myapp/templates/deployment.yaml 
 1868  vi myapp/templates/service.yaml 
 1869  helm install apple myapp/ 
 1870  helm ls
 1871  kubectl get deployments.apps 
 1872  kubectl get svc
 1873  vi myapp/templates/service.yaml 
 1874  helm uninstall apple
 1875  helm ls
 1876  vi myapp/templates/deployment.yaml 
 1877  vi myapp/templates/_helpers.tpl 
 1878  vi myapp/templates/deployment.yaml 
 1879  vi myapp/templates/_helpers.tpl 
 1880  vi myapp/templates/deployment.yaml 
 1881  vi myapp/templates/_helpers.tpl 
 1882  vi myapp/templates/deployment.yaml 
 1883  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1884  vi myapp/templates/deployment.yaml 
 1885  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1886  vi myapp/templates/deployment.yaml 
 1887  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1888  vi myapp/templates/_helpers.tpl 
 1889  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1890  vi myapp/templates/_helpers.tpl 
 1891  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1892  vi myapp/templates/_helpers.tpl 
 1893  vi myapp/templates/deployment.yaml 
 1894  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1895  vi myapp/templates/deployment.yaml 
 1896  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1897  vi myapp/templates/deployment.yaml 
 1898  cd /tm
 1899  cd /tmp/
 1900  helm create test
 1901  vi test/templates/ingress.yaml 
 1902  cd -
 1903  vi myapp/templates/service.yaml 
 1904  vi myapp/values.yaml 
 1905  vi myapp/templates/service.yaml 
 1906  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1907  vi myapp/templates/service.yaml 
 1908  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1909  vi myapp/values.yaml 
 1910  helm install apple myapp/ --set replicacount=10 --dry-run --debug
 1911  tree myapp/
 1912  helm index .
 1913  helm repo index
 1914  helm repo index .
 1915  ls
 1916  vi index.yaml 
 1917  rm index.yaml 
 1918  mkdir package
 1919  ls
 1920  helm package myapp/
 1921  ls
 1922  mv myapp-0.1.0.tgz package/
 1923  cd package/
 1924  ls
 1925  helm repo index .
 1926  ls
 1927  vi index.yaml 
 1928  git init
 1929  git add .
 1930  git commit -m "first commit"
 1931  git branch -M main
 1932  git remote add origin https://github.com/aneeshansari23/nhelm.git
 1933  git push -u origin main
 1934  cd ../../
 1935  ls
 1936  git add .
 1937  git commit -m "test"
 1938  git push -u origin main
 1939  cd helm/package/
 1940  ls
 1941  git remote add origin git@github.com:aneeshansari23/nhelm.git
 1942  git remote rm origin 
 1943  git remote add origin git@github.com:aneeshansari23/nhelm.git
 1944  git push -u origin main
 1945  hel repo ls
 1946  helm repo ls
 1947  helm repo add nhelm https://raw.githubusercontent.com/aneeshansari23/nhelm/refs/heads/main/
 1948  helm repo ls
 1949  helm repo update nhelm
 1950  helm search myapp
 1951  helm search myapp nhelm
 1952  helm search repo nhelm
 1953  helm search repo nhelm -l
 1954  helm install mango nhelm/myapp
 1955  helm ls
 1956  kubectl get pods
 1957  kubectl get svc
 1958  kubectl get deployments.apps -o wide
 1959  cd ..
 1960  ls
 1961  vi myapp/values.yaml 
 1962  vi myapp/Chart.yaml 
 1963  helm package myapp/
 1964  ls
 1965  mv myapp-0.1.1.tgz package/
 1966  ls
 1967  cd package/
 1968  ls
 1969  helm repo index .
 1970  ls
 1971  vi index.yaml 
 1972  git add .
 1973  git commit -m "v2"
 1974  git push origin main 
 1975  helm ls
 1976  helm repo update nhelm
 1977  helm search repo nhelm 
 1978  helm search repo nhelm -l
 1979  helm upgrade mango nhelm/myapp
 1980  helm ls
 1981  kubectl get deployments.apps -o wide
 1982  kubectl get pods
 1983  helm history mango
 1984  helm rollback mango 1
 1985  helm ls
 1986  helm history mango
 1987  kubectl get deployments.apps -o wide
 1988  kubectl get pods
 1989  c
 1990  cd ../..
 1991  kubectl create namespace argocd
 1992  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
 1993  kubectl get all -n argocd 
 1994  kubectl -n argocd edit svc argocd-server
 1995  kubectl get all -n argocd 
 1996  kubectl get secret -n argocd 
 1997  kubectl get secret -n argocd argocd-initial-admin-secret -o yaml
 1998  echo "azljY213azdZV2ZjY3F3Mw==" | base64 -d
 1999  init 0
 2000  kubectl get nodes
 2001  kubectl get pod -n kube-system 
 2002  kubectl -n kube-system describe pod kube-apiserver-server | grep "image:"
 2003  kubectl -n kube-system describe pod kube-apiserver-server | grep "image"
 2004  kubectl -n kube-system describe pod kube-controller-manager-server | grep "image"
 2005  kubectl -n kube-system describe pod kube-scheduler-server | grep "image"
 2006  kubectl -n kube-system describe pod kube-proxy-29s8l | grep "image"
 2007  kubectl -n kube-system describe pod coredns-5dd5756b68-cpq5t | grep "image"
 2008  kubectl -n kube-system describe pod etcd-server | grep "image"
 2009  kubectl version
 2010  kubeadm --version
 2011  kubeadm version
 2012  apt-cache madison kubeadm
 2013  sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
 2014  sudo echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
 2015  vi /etc/apt/sources.list.d/kubernetes.list 
 2016  apt update 
 2017  apt-cache madison kubeadm
 2018  kubeadm version
 2019  apt-get install -y kubeadm=1.29.11-1.1
 2020  kubeadm version
 2021  kubeadm upgrade plan
 2022  kubeadm upgrade apply v1.29.11
 2023  kubectl get pod -n kube-system 
 2024  kubectl -n kube-system describe pod kube-scheduler-server | grep "image"
 2025  kubectl get nodes
 2026  apt-get install -y kubeadm=v1.29.11
 2027  apt-get install -y kubeadm=1.29.11
 2028  apt-get install -y kubelet=1.29.11-1.1
 2029  systemctl daemon-reload 
 2030  systemctl restart kubelet
 2031  kubectl get nodes
 2032  kubectl cordon node1
 2033  kubectl get nodes
 2034  kubectl drain node1 --ignore-daemonsets --delete-local-data
 2035  kubectl get pod -o wid
 2036  kubectl get pod -o wide
 2037  kubeadm upgrade node
 2038  kubectl get nodes
 2039  kubectl get pods
 2040  history 
 2041  kubectl get nodes
 2042  kubectl uncordon node1 
 2043  kubectl get nodes
 2044  cd myapp/
 2045  ls
 2046  mkdir net
 2047  cd net/
 2048  cd ..
 2049  cp wordpress.yaml mysql.yaml net/
 2050  cd net/
 2051  ls
 2052  cp wordpress.yaml wp.yaml
 2053  vi wordpress.yaml 
 2054  kubectl create -f wordpress.yaml 
 2055  kubectl create -f mysql.yaml 
 2056  kubectl get pods
 2057  kubectl delete deployments.apps mydep mango 
 2058  kubectl get pods
 2059  vi wp.yaml 
 2060  kubectl create -f wp.yaml 
 2061  kubectl get pods
 2062  kubectl get pods -o wide
 2063  kubectl get svc
 2064  kubectl get pos
 2065  kubectl get pod
 2066  vi wordpress.yaml 
 2067  vi wp.yaml 
 2068  cd ..
 2069  ls
 2070  vi wordpress.yaml 
 2071  cd net/
 2072  vi wordpress.yaml 
 2073  vi wp.yaml 
 2074  kubectl delete -f .
 2075  vi mysql.yaml 
 2076  vi wp.yaml 
 2077  vi mysql.yaml 
 2078  vi wp.yaml 
 2079  vi mysql.yaml 
 2080  vi wp.yaml 
 2081  vi wordpress.yaml 
 2082  kubectl create -f .
 2083  ls
 2084  kubectl get pods
 2085  kubectl get svc
 2086  kubectl delete -f wp.yaml 
 2087  vi wp.yaml 
 2088  kubectl create -f wp.yaml 
 2089  vi net.yaml
 2090  vi mysql.yaml 
 2091  vi net.yaml
 2092  vi wordpress.yaml 
 2093  vi net.yaml
 2094  kubectl create -f net.yaml
 2095  kubectl get networkpolicies.networking.k8s.io 
 2096  kubectl delete -f net.yaml
 2097  kubectl create -f net.yaml
 2098  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
 2099  helm install prometheus prometheus-community/prometheus     --namespace prometheus     --set alertmanager.persistentVolume.storageClass="local-path"     --set server.persistentVolume.storageClass="local-path"
 2100  kubectl create ns prometheus
 2101  helm install prometheus prometheus-community/prometheus     --namespace prometheus     --set alertmanager.persistentVolume.storageClass="local-path"     --set server.persistentVolume.storageClass="local-path"
 2102  kubectl -n prometheus get pods
 2103  kubectl -n prometheus get svc
 2104  kubectl create namespace grafana
 2105  helm repo add grafana https://grafana.github.io/helm-charts
 2106  vi grafana.yaml
 2107  helm install grafana grafana/grafana     --namespace grafana     --set persistence.storageClassName="local-path"     --set persistence.enabled=true     --set adminPassword='admin'     --values grafana.yaml     --set service.type=NodePort
 2108  kubectl -n grafana get pods
 2109  kubectl -n grafana get pods,svc
 2110  kubectl -n prometheus get pods,svc
 2111  kubectl -n grafana get pods,svc
 2112  kubectl get pods
 2113  kubectl delete -f .
 2114  helm  -n grafana ;ls
 2115  helm  -n grafana ls
 2116  helm  -n grafana uninstall grafana
 2117  helm  -n promethues ls
 2118  history 
 2119  helm  -n prometheus ls
 2120  helm  -n prometheus uninstall prometheus
 2121  helm repo add elastic https://Helm.elastic.co
 2122  vi elk.yaml
 2123  helm install elasticsearch elastic/elasticsearch -f ./elk.yaml
 2124  kubectl get pods
 2125  kubectl describe pod elasticsearch-master-0
 2126  kubectl get pods
 2127  kubectl scale sts elasticsearch-master --replicas 2
 2128  kubectl get pods
 2129  kubectl describe po elasticsearch-master-0
 2130  kubectl get pods
 2131  helm install kibana elastic/kibana 
 2132  history > cluster-update-history.txt
